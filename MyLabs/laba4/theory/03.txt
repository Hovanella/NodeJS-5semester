1. Дайте пояснению понятию  «событие программного объекта».
	- это процесс перехода объекта из одного состояние в другое. При этом,
об этом переходе могут быть извещены другие объекты. У события есть издатель
(или генератор) события и могут быть подписчики (или обработчики) события.

2. Объясните механизм генерации и обработки событий в C#.
	События - поле класса, позволяющий ему посылать другим объектам уведомления
об изменении своего состояния. Класс, являющийся отправителем сообщения, публикует события,
которые он может инициировать, а другие классы, являющиеся получателями сообщения,
подписываются на получение этих событий. При наступлении события издатель уведомляет
подписчиков о событии, затем происходит обработка события подписчиком.
	События построены на основе делегатов: с помощью делегатов вызываются
методы-обработчики событий. Поэтому создание события в классе состоит из следующих частей:
	- Описание делегата, задающего сигнатуру обработчиков событий
	- Описание события
	- Описание метода (методов), инициирующих событие
	Использование событий:
	- Подписка на событие
	- Описание метода-обработчика события (такая же сигнатура, как и у делегата)

3. Поясните как самостоятельно реализовать механизм генерации и обработки событий
на JS или С++.
	JS: CustonEvent(type [, options])
	options:
		bubbles: true/false – если true, тогда событие всплывает.
		cancelable: true/false – если true, тогда можно отменить действие по умолчанию.
		detail: инфа для передачи в событие
	После того, как объект события создан, мы должны запустить его на элементе, вызвав
метод elem.dispatchEvent(event)
<body>
<h1 id="elem">Привет из кода!</h1>
<script>
  // ловим на document...
  document.addEventListener("hello", function(event) { // (1)
    alert("Привет от " + event.target.tagName); // Привет от H1
  });
  // ...запуск события на элементе!
  let event = new Event("hello", {bubbles: true}); // (2)
  elem.dispatchEvent(event);
  // обработчик на document сработает и выведет сообщение.
</script>
</body>
	Обратите внимание:
Мы должны использовать addEventListener для наших собственных событий, т.к. on<event>-
свойства существуют только для встроенных событий, то есть document.onhello не сработает.
Мы обязаны передать флаг bubbles:true, иначе наше событие не будет всплывать.

4. Какой встроенный механизм используется в Node.js для генерации и обработки событий.
Поясните принцип его работы.
	EventEmitter: JS-класс, предоставляющий функциональность для асинхронной
обработки событий в Node.js.
	необходимо включения двух модулей: events и util.
	применяется в качестве базового для пользовательского объекта. Производный
от EventEmitter объект может быть создан с помощью  функции inherits модуля  utils.
	производный от EventEmitter объект приобретает функциональность, позволяющую
генерировать и прослушивать события.
	для генерации событий предназначена функция emit, а для прослушивания функция on.

var util = require('util');
var ee = require('events');
util.inherits(DB, ee.EventEmitter);
var db = new DB();
db.emit(...);
db.on(...);